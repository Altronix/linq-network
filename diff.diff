diff --git a/libhttp/route_proxy.c b/libhttp/route_proxy.c
index 36419f9..3da0fc2 100644
--- a/libhttp/route_proxy.c
+++ b/libhttp/route_proxy.c
@@ -33,9 +33,10 @@ route_proxy(
         snprintf(serial, sizeof(serial), "%.*s", (int)(ptr - url), url);
         plen = ctx->curr_message->uri.len - (ptr - ctx->curr_message->uri.p);
         if (meth == HTTP_METHOD_POST || meth == HTTP_METHOD_PUT) {
-            linq_network_send_post_mem(
+            linq_network_send(
                 linq,
                 serial,
+                "POST",
                 ptr,
                 plen,
                 body,
@@ -43,11 +44,27 @@ route_proxy(
                 on_response,
                 ctx->curr_connection);
         } else if (meth == HTTP_METHOD_DELETE) {
-            linq_network_send_delete_mem(
-                linq, serial, ptr, plen, on_response, ctx->curr_connection);
+            linq_network_send(
+                linq,
+                serial,
+                "DELETE",
+                ptr,
+                plen,
+                NULL,
+                0,
+                on_response,
+                ctx->curr_connection);
         } else {
-            linq_network_send_get_mem(
-                linq, serial, ptr, plen, on_response, ctx->curr_connection);
+            linq_network_send(
+                linq,
+                serial,
+                "GET",
+                ptr,
+                plen,
+                NULL,
+                0,
+                on_response,
+                ctx->curr_connection);
         }
     } else {
         http_printf_json(ctx->curr_connection, 400, JERROR_400);
diff --git a/libnetwork/CMakeLists.txt b/libnetwork/CMakeLists.txt
index f3f2a8d..2d8fd0a 100644
--- a/libnetwork/CMakeLists.txt
+++ b/libnetwork/CMakeLists.txt
@@ -29,7 +29,7 @@ if(ENABLE_TESTING)
   target_compile_definitions(network-test-static PUBLIC 
     "LINQ_NETWORK_STATIC" 
     ${definitions})
-  set_target_properties(network-static PROPERTIES 
+  set_target_properties(network-test-static PROPERTIES 
     PUBLIC_HEADER "${INSTALL_HEADERS}"
     OUTPUT_NAME "linqnetwork-test")
   target_compile_definitions(network-test-static PRIVATE "-DTESTING")
diff --git a/libnetwork/device.c b/libnetwork/device.c
index 133c0c0..34c1cc1 100644
--- a/libnetwork/device.c
+++ b/libnetwork/device.c
@@ -10,14 +10,6 @@
         if ((*rp)->on_complete) (*rp)->on_complete((*rp)->ctx, err, dat, dp);  \
     } while (0)
 
-typedef enum E_REQUEST_METHOD
-{
-    REQUEST_METHOD_RAW = 0,
-    REQUEST_METHOD_GET,
-    REQUEST_METHOD_POST,
-    REQUEST_METHOD_DELETE
-} E_REQUEST_METHOD;
-
 typedef struct request_s
 {
     router_s forward;
@@ -275,8 +267,27 @@ device_heartbeat(device_s* d)
     d->last_seen = sys_tick();
 }
 
-static void
-send_method(
+E_REQUEST_METHOD
+device_method_from_str(const char* method)
+{
+    uint32_t l = strlen(method);
+    if (l == 3) {
+        if (!memcmp(method, "GET", l)) {
+            return REQUEST_METHOD_GET;
+        } else if (!(memcmp(method, "PUT", l))) {
+            return REQUEST_METHOD_POST; // TODO support PUT
+        }
+    } else if (l == 4 && !memcmp(method, "POST", l)) {
+        return REQUEST_METHOD_POST;
+    } else if (l == 6 && !memcmp(method, "DELETE", l)) {
+        return REQUEST_METHOD_DELETE;
+    }
+    assert(false);
+    return -1; // should never return
+}
+
+void
+device_send(
     device_s* d,
     E_REQUEST_METHOD method,
     const char* path,
@@ -296,6 +307,7 @@ send_method(
     }
 }
 
+/*
 void
 device_send_delete(
     device_s* d,
@@ -304,7 +316,7 @@ device_send_delete(
     void* context)
 {
     uint32_t plen = strlen(path);
-    send_method(d, REQUEST_METHOD_DELETE, path, plen, NULL, 0, fn, context);
+    device_send(d, REQUEST_METHOD_DELETE, path, plen, NULL, 0, fn, context);
 }
 
 void
@@ -315,7 +327,7 @@ device_send_delete_mem(
     linq_network_request_complete_fn fn,
     void* context)
 {
-    send_method(d, REQUEST_METHOD_DELETE, path, plen, NULL, 0, fn, context);
+    device_send(d, REQUEST_METHOD_DELETE, path, plen, NULL, 0, fn, context);
 }
 
 void
@@ -326,7 +338,7 @@ device_send_get(
     void* context)
 {
     uint32_t plen = strlen(path);
-    send_method(d, REQUEST_METHOD_GET, path, plen, NULL, 0, fn, context);
+    device_send(d, REQUEST_METHOD_GET, path, plen, NULL, 0, fn, context);
 }
 
 void
@@ -337,7 +349,7 @@ device_send_get_mem(
     linq_network_request_complete_fn fn,
     void* context)
 {
-    send_method(d, REQUEST_METHOD_GET, path, plen, NULL, 0, fn, context);
+    device_send(d, REQUEST_METHOD_GET, path, plen, NULL, 0, fn, context);
 }
 
 void
@@ -349,7 +361,7 @@ device_send_post(
     void* context)
 {
     uint32_t plen = strlen(path), jlen = strlen(json);
-    send_method(d, REQUEST_METHOD_POST, path, plen, json, jlen, fn, context);
+    device_send(d, REQUEST_METHOD_POST, path, plen, json, jlen, fn, context);
 }
 
 void
@@ -362,11 +374,12 @@ device_send_post_mem(
     linq_network_request_complete_fn fn,
     void* context)
 {
-    send_method(d, REQUEST_METHOD_POST, path, plen, json, jlen, fn, context);
+    device_send(d, REQUEST_METHOD_POST, path, plen, json, jlen, fn, context);
 }
 
+*/
 void
-device_send(
+device_send_raw(
     device_s* d,
     const char* path,
     const char* json,
@@ -374,7 +387,7 @@ device_send(
     void* context)
 {
     uint32_t plen = strlen(path), jlen = json ? strlen(json) : 0;
-    send_method(d, REQUEST_METHOD_RAW, path, plen, json, jlen, fn, context);
+    device_send(d, REQUEST_METHOD_RAW, path, plen, json, jlen, fn, context);
 }
 
 uint32_t
diff --git a/libnetwork/device.h b/libnetwork/device.h
index dcbaa36..c5f7f13 100644
--- a/libnetwork/device.h
+++ b/libnetwork/device.h
@@ -15,6 +15,14 @@ extern "C"
 {
 #endif
 
+    typedef enum E_REQUEST_METHOD
+    {
+        REQUEST_METHOD_RAW = 0,
+        REQUEST_METHOD_GET = 1,
+        REQUEST_METHOD_POST = 2,
+        REQUEST_METHOD_DELETE = 3
+    } E_REQUEST_METHOD;
+
     typedef struct device_s device_s;
     MAP_INIT_H(device, device_s);
 
@@ -35,6 +43,23 @@ extern "C"
     uint32_t device_last_seen(device_s* d);
     uint32_t device_uptime(device_s* d);
     void device_heartbeat(device_s* d);
+    E_REQUEST_METHOD device_method_from_str(const char*);
+    void device_send(
+        device_s* d,
+        E_REQUEST_METHOD method,
+        const char* path,
+        uint32_t plen,
+        const char* json,
+        uint32_t jlen,
+        linq_network_request_complete_fn fn,
+        void* context);
+    void device_send_raw(
+        device_s* d,
+        const char* path,
+        const char* json,
+        linq_network_request_complete_fn fn,
+        void* context);
+    /*
     void device_send_delete(
         device_s*,
         const char*,
@@ -71,12 +96,8 @@ extern "C"
         uint32_t,
         linq_network_request_complete_fn,
         void*);
-    void device_send(
-        device_s* d,
-        const char* path,
-        const char* json,
-        linq_network_request_complete_fn fn,
-        void* context);
+        */
+
     uint32_t device_request_sent_at(device_s* d);
     uint32_t device_request_retry_count(device_s* r);
     uint32_t device_request_retry_at(device_s* d);
diff --git a/libnetwork/linq_network.c b/libnetwork/linq_network.c
index 930466e..44c5870 100644
--- a/libnetwork/linq_network.c
+++ b/libnetwork/linq_network.c
@@ -218,6 +218,30 @@ linq_network_node_count(const linq_network_s* l)
 
 // send a get request to a device connected to us
 E_LINQ_ERROR
+linq_network_send(
+    const linq_network_s* linq,
+    const char* serial,
+    const char* method,
+    const char* path,
+    uint32_t path_len,
+    const char* json,
+    uint32_t json_len,
+    linq_network_request_complete_fn callback,
+    void* context)
+{
+    return zmtp_device_send(
+        &linq->zmtp,
+        serial,
+        method,
+        path,
+        path_len,
+        json,
+        json_len,
+        callback,
+        context);
+}
+/*
+E_LINQ_ERROR
 linq_network_send_get(
     const linq_network_s* linq,
     const char* serial,
@@ -293,3 +317,4 @@ linq_network_send_delete_mem(
     return zmtp_device_send_delete_mem(
         &linq->zmtp, serial, path, plen, fn, context);
 }
+*/
diff --git a/libnetwork/linq_network.h b/libnetwork/linq_network.h
index 0f15c1a..043176f 100644
--- a/libnetwork/linq_network.h
+++ b/libnetwork/linq_network.h
@@ -170,6 +170,18 @@ extern "C"
         void*);
     LINQ_NETWORK_EXPORT uint32_t
     linq_network_node_count(const linq_network_s* linq);
+    E_LINQ_ERROR
+    linq_network_send(
+        const linq_network_s* linq,
+        const char* sid,
+        const char* meth,
+        const char* path,
+        uint32_t plen,
+        const char* json,
+        uint32_t jlen,
+        linq_network_request_complete_fn fn,
+        void* ctx);
+    /*
     LINQ_NETWORK_EXPORT E_LINQ_ERROR linq_network_send_get(
         const linq_network_s*,
         const char*,
@@ -212,6 +224,7 @@ extern "C"
         uint32_t,
         linq_network_request_complete_fn,
         void*);
+        */
 
     // Sys API
     LINQ_NETWORK_EXPORT bool sys_running();
diff --git a/libnetwork/zmtp.c b/libnetwork/zmtp.c
index 0d50bed..8dedf68 100644
--- a/libnetwork/zmtp.c
+++ b/libnetwork/zmtp.c
@@ -286,7 +286,7 @@ process_request(zmtp_s* l, zsock_t* sock, zmsg_t** msg, zframe_t** frames)
         if (n && d) {
             print_null_terminated(url, sizeof(url), path);
             if (data) print_null_terminated(json, sizeof(json), data);
-            device_send(*d, url, data ? json : NULL, on_device_response, n);
+            device_send_raw(*d, url, data ? json : NULL, on_device_response, n);
             e = LINQ_ERROR_OK;
         } else {
             // TODO send 404 response (device not here)
@@ -696,6 +696,30 @@ send_error(linq_network_request_complete_fn fn, void* context, E_LINQ_ERROR e)
     }
 }
 
+E_LINQ_ERROR
+zmtp_device_send(
+    const zmtp_s* zmtp,
+    const char* sid,
+    const char* meth,
+    const char* path,
+    uint32_t plen,
+    const char* json,
+    uint32_t jlen,
+    linq_network_request_complete_fn fn,
+    void* ctx)
+{
+    device_s** d = device_get(zmtp, sid);
+    if (!d) {
+        send_error(fn, ctx, LINQ_ERROR_DEVICE_NOT_FOUND);
+        return LINQ_ERROR_DEVICE_NOT_FOUND;
+    } else {
+        E_REQUEST_METHOD m = device_method_from_str(meth);
+        device_send(*d, m, path, plen, json, jlen, fn, ctx);
+        return LINQ_ERROR_OK;
+    }
+}
+
+/*
 E_LINQ_ERROR
 zmtp_device_send_get(
     const zmtp_s* zmtp,
@@ -794,3 +818,4 @@ sys_running()
 {
     return !zsys_interrupted;
 }
+*/
diff --git a/libnetwork/zmtp.h b/libnetwork/zmtp.h
index 52763eb..cdb523d 100644
--- a/libnetwork/zmtp.h
+++ b/libnetwork/zmtp.h
@@ -61,6 +61,18 @@ extern "C"
     E_LINQ_ERROR zmtp_close_dealer(zmtp_s* zmtp, linq_network_socket sock);
     E_LINQ_ERROR
     zmtp_poll(zmtp_s* self, int32_t ms);
+    E_LINQ_ERROR
+    zmtp_device_send(
+        const zmtp_s* zmtp,
+        const char* sid,
+        const char* meth,
+        const char* path,
+        uint32_t plen,
+        const char* json,
+        uint32_t jlen,
+        linq_network_request_complete_fn fn,
+        void* ctx);
+    /*
     E_LINQ_ERROR zmtp_device_send_get(
         const zmtp_s*,
         const char*,
@@ -103,6 +115,7 @@ extern "C"
         uint32_t,
         linq_network_request_complete_fn,
         void*);
+        */
 #ifdef __cplusplus
 }
 #endif
diff --git a/test/integration/forward_response.c b/test/integration/forward_response.c
index 2d7b9ff..c7a0c5a 100644
--- a/test/integration/forward_response.c
+++ b/test/integration/forward_response.c
@@ -127,8 +127,16 @@ main(int argc, char* argv[])
 
         if (!request_sent && linq_network_device_count(client)) {
             printf("%s", "[C] Request Sent!");
-            linq_network_send_get(
-                client, "dummy", "/ATX/hello", on_request_complete, &pass);
+            linq_network_send(
+                client,
+                "dummy",
+                "GET",
+                "/ATX/hello",
+                10,
+                NULL,
+                0,
+                on_request_complete,
+                &pass);
             request_sent = true;
         }
     }
