add_library(mock-file mock_file.c mock_file.h)
target_link_libraries(mock-file cmocka stdc++ common-static)
target_include_directories(mock-file PUBLIC .)

function (append_mock_file_linker_flags dst)
  string(CONCAT __arg "-Wl,")
  string(CONCAT __arg ${__arg} "--wrap=fopen,")
  string(CONCAT __arg ${__arg} "--wrap=fclose,")
  string(CONCAT __arg ${__arg} "--wrap=fread,")
  string(CONCAT __arg ${__arg} "--wrap=fwrite,")
  string(CONCAT __arg ${__arg} "--wrap=fprintf,")
  string(CONCAT __arg ${__arg} "--wrap=vfprintf,")
  string(CONCAT __arg ${__arg} "--wrap=ioctl,")
  string(CONCAT __arg ${__arg} "--wrap=fcntl,")
  string(CONCAT __arg ${__arg} "--wrap=fileno_unlocked,")
  string(CONCAT __arg ${__arg} "--wrap=fileno")
  list(APPEND arg "${${dst}}")
  list(APPEND arg "${__arg}")
  set(${dst} "${arg}" PARENT_SCOPE)
endfunction()

append_mock_file_linker_flags(wrap_flags)

add_executable(test-mock-file main.c)
set_target_properties(test-mock-file PROPERTIES LINK_FLAGS "${wrap_flags}")
target_link_libraries(test-mock-file mock-file cmocka)
add_test(NAME test-mock-file COMMAND test-mock-file)
install(TARGETS test-mock-file DESTINATION bin)
